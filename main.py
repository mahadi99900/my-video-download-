import logging
import os
import sys
import asyncio
import time
import getpass  # ржЯрзЛржХрзЗржи ржЗржиржкрзБржЯ ржирзЗржУрзЯрж╛рж░ ржЬржирзНржп ржирждрзБржи рж▓рж╛ржЗржмрзНрж░рзЗрж░рзА
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest
import yt_dlp

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


# /start ржХржорж╛ржирзНржбрзЗрж░ ржлрж╛ржВрж╢ржи
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"ЁЯСЛ рж╣рж╛ржЗ {user.mention_html()}!\n\n"
        "ржЖржорж┐ ржПржХржЯрж┐ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржбрж╛рж░ ржмржЯред ржЖржорж╛ржХрзЗ ржпрзЗржХрзЛржирзЛ рж╕рж╛ржкрзЛрж░рзНржЯрзЗржб рж╕рж╛ржЗржЯрзЗрж░ ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ ржкрж╛ржарж╛ржи, ржЖржорж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ ржкрж╛ржарж┐рзЯрзЗ ржжрзЗржмред"
    )

# ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржПржмржВ ржкрж╛ржарж╛ржирзЛрж░ ржорзВрж▓ ржлрж╛ржВрж╢ржи
async def download_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    url = message.text.strip()
    
    reply_msg = await message.reply_text(
        "тП│ рж▓рж┐ржЩрзНржХ ржкрзНрж░рж╕рзЗрж╕ ржХрж░ржЫрж┐...",
        reply_to_message_id=message.message_id
    )

    filename = None
    last_update_time = 0
    
    try:
        # ржбрж╛ржЙржирж▓рзЛржб сГЮсГасГЭр░Чр▒Нр░░рзНрж░рзЗрж╕ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп рж╣рзБржХ ржлрж╛ржВрж╢ржи
        async def progress_hook(d):
            nonlocal last_update_time
            if d['status'] == 'downloading':
                current_time = time.time()
                if current_time - last_update_time > 2:
                    percentage = d['_percent_str']
                    speed = d.get('_speed_str', 'N/A')
                    eta = d.get('_eta_str', 'N/A')
                    
                    try:
                        await reply_msg.edit_text(
                            f"ЁЯУе ржбрж╛ржЙржирж▓рзЛржб ржЪрж▓ржЫрзЗ...\n\n"
                            f" avance: {percentage}\n"
                            f" ржЧрждрж┐: {speed}\n"
                            f" ржмрж╛ржХрж┐ рж╕ржорзЯ: {eta}"
                        )
                        last_update_time = current_time
                    except BadRequest:
                        pass
            elif d['status'] == 'finished':
                 await reply_msg.edit_text("тЬЕ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи!\n\nЁЯУд ржПржЦржи ржЖржкржирж╛ржХрзЗ ржнрж┐ржбрж┐ржУржЯрж┐ ржкрж╛ржарж╛ржЪрзНржЫрж┐...")

        # yt-dlp ржПрж░ ржЬржирзНржп ржЕржкрж╢ржи
        ydl_opts = {
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
            'outtmpl': '%(title)s.%(ext)s',
            'noplaylist': True,
            'logger': logger,
            'progress_hooks': [progress_hook],
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = await asyncio.to_thread(ydl.extract_info, url, download=True)
            filename = ydl.prepare_filename(info_dict)

        await context.bot.send_video(
            chat_id=update.effective_chat.id,
            video=open(filename, 'rb'),
            caption=info_dict.get('title', 'Downloaded Video'),
            reply_to_message_id=message.message_id,
            supports_streaming=True
        )
        
        await reply_msg.delete()

    except Exception as e:
        logger.error(f"Error downloading {url}: {e}")
        error_message = str(e)
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        await reply_msg.edit_text(f"тЭМ ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред\n\nрждрзНрж░рзБржЯрж┐: {error_message}")

    finally:
        if filename and os.path.exists(filename):
            os.remove(filename)
            logger.info(f"Deleted local file: {filename}")


def main() -> None:
    """ржмржЯржЯрж┐ рж╢рзБрж░рзБ ржПржмржВ ржЪрж╛рж▓рж╛ржирзЛрж░ ржлрж╛ржВрж╢ржи"""
    
    # --- ржПржЦрж╛ржирзЗржЗ ржорзВрж▓ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ---
    # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржЗржиржкрзБржЯ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
    try:
        bot_token = getpass.getpass(" ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи ржкрзЗрж╕рзНржЯ ржХрж░рзЗ Enter ржЪрж╛ржкрзБржи: ")
        if not bot_token:
            logger.error("ржЯрзЛржХрзЗржи ржжрзЗржУрзЯрж╛ рж╣рзЯржирж┐! ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред")
            sys.exit(1) # ржЯрзЛржХрзЗржи ржирж╛ ржжрж┐рж▓рзЗ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмржирзНржз рж╣рзЯрзЗ ржпрж╛ржмрзЗ
    except (KeyboardInterrupt, EOFError):
        logger.info("\nржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмржирзНржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        sys.exit(0)
    
    # ржЗржиржкрзБржЯ ржХрж░рж╛ ржЯрзЛржХрзЗржи ржжрж┐рзЯрзЗ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    application = Application.builder().token(bot_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_video))

    logger.info("ржмржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЪрж╛рж▓рзБ рж╣рзЯрзЗржЫрзЗ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
